import { APIResponse, APIResponseError, APIResponseSuccess, App, AppAssociation, BitbucketCloudRepoAssociation, BitbucketServerRepoAssociation, CommandPreRun, CordovaPackageJson, ExitCodeException, GithubBranch, GithubRepo, GithubRepoAssociation, ICommand, IProjectConfig, IntegrationName, Login, MultiProjectConfig, Org, Response, SSHKey, SecurityProfile, Snapshot, StarterManifest, SuperAgentError, TreatableAilment, User } from './definitions';
export declare const INTEGRATION_NAMES: IntegrationName[];
export declare function isCommand(c: object): c is ICommand;
export declare function isCommandPreRun(c: ICommand): c is CommandPreRun;
export declare function isStarterManifest(o: object): o is StarterManifest;
export declare function isCordovaPackageJson(o: object): o is CordovaPackageJson;
export declare function isExitCodeException(e: Error): e is ExitCodeException;
export declare function isSuperAgentError(e: Error): e is SuperAgentError;
export declare function isAPIResponseSuccess(r: APIResponse): r is APIResponseSuccess;
export declare function isAPIResponseError(r: APIResponse): r is APIResponseError;
export declare function isOrg(o: object): o is Org;
export declare function isGithubRepo(r: object): r is GithubRepo;
export declare function isGithubBranch(r: object): r is GithubBranch;
export declare function isGithubRepoListResponse(r: APIResponse): r is Response<GithubRepo[]>;
export declare function isGithubBranchListResponse(r: APIResponse): r is Response<GithubBranch[]>;
export declare function isAppAssociation(a: object): a is AppAssociation;
export declare function isAppAssociationResponse(r: APIResponse): r is Response<AppAssociation>;
export declare function isGithubRepoAssociation(a: object): a is GithubRepoAssociation;
export declare function isBitbucketCloudRepoAssociation(a: object): a is BitbucketCloudRepoAssociation;
export declare function isBitbucketServerRepoAssociation(a: object): a is BitbucketServerRepoAssociation;
export declare function isApp(d: object): d is App;
export declare function isAppResponse(r: APIResponse): r is Response<App>;
export declare function isAppsResponse(r: APIResponse): r is Response<App[]>;
export interface OAuthLogin {
    redirect_url: string;
}
export declare function isOAuthLoginResponse(r: APIResponse): r is Response<OAuthLogin>;
export declare function isSnapshot(s: object): s is Snapshot;
export declare function isSnapshotResponse(r: APIResponse): r is Response<Snapshot>;
export declare function isSnapshotListResponse(r: APIResponse): r is Response<Snapshot[]>;
export declare function isLogin(l: object): l is Login;
export declare function isLoginResponse(r: APIResponse): r is Response<Login>;
export declare function isUser(u: object): u is User;
export declare function isUserResponse(r: APIResponse): r is Response<User>;
export declare function isSSHKey(k: object): k is SSHKey;
export declare function isSSHKeyListResponse(r: APIResponse): r is Response<SSHKey[]>;
export declare function isSSHKeyResponse(r: APIResponse): r is Response<SSHKey>;
export declare function isSecurityProfile(o: object): o is SecurityProfile;
export declare function isSecurityProfileResponse(r: APIResponse): r is Response<SecurityProfile>;
export declare function isTreatableAilment(a: object): a is TreatableAilment;
export declare function isIntegrationName(name: string): name is IntegrationName;
export declare function isProjectConfig(configFile?: object): configFile is IProjectConfig;
export declare function isMultiProjectConfig(configFile?: object): configFile is MultiProjectConfig;
