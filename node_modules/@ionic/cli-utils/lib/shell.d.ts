/// <reference types="node" />
import { ChildProcess } from 'child_process';
import { ILogger, IShell, IShellOutputOptions, IShellRunOptions, IShellSpawnOptions } from '../definitions';
export interface ShellDeps {
    readonly log: ILogger;
}
export interface ShellOptions {
    readonly alterPath?: (p: string) => string;
}
export declare class Shell implements IShell {
    protected readonly e: ShellDeps;
    readonly alterPath: (p: string) => string;
    constructor(e: ShellDeps, options?: ShellOptions);
    run(command: string, args: string[], { stream, killOnExit, showCommand, showError, fatalOnNotFound, fatalOnError, truncateErrorOutput, ...crossSpawnOptions }: IShellRunOptions): Promise<void>;
    output(command: string, args: string[], { fatalOnNotFound, fatalOnError, showError, showCommand, ...crossSpawnOptions }: IShellOutputOptions): Promise<string>;
    spawn(command: string, args: string[], { showCommand, ...crossSpawnOptions }: IShellSpawnOptions): ChildProcess;
    cmdinfo(command: string, args?: string[]): Promise<string | undefined>;
    protected prepareSpawnOptions(options: IShellSpawnOptions): void;
}
export declare function prependNodeModulesBinToPath(projectDir: string, p: string): string;
