"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cli_framework_1 = require("@ionic/cli-framework");
const format_1 = require("@ionic/cli-framework/utils/format");
const fs_1 = require("@ionic/cli-framework/utils/fs");
const terminal_1 = require("@ionic/cli-framework/utils/terminal");
const chalk_1 = require("chalk");
const Debug = require("debug");
const path = require("path");
const bootstrap_1 = require("./bootstrap");
const constants_1 = require("./constants");
const config_1 = require("./lib/config");
const environment_1 = require("./lib/environment");
const http_1 = require("./lib/http");
const project_1 = require("./lib/project");
const prompts_1 = require("./lib/prompts");
const session_1 = require("./lib/session");
const shell_1 = require("./lib/shell");
const http_2 = require("./lib/utils/http");
const logger_1 = require("./lib/utils/logger");
tslib_1.__exportStar(require("./constants"), exports);
tslib_1.__exportStar(require("./guards"), exports);
const debug = Debug('ionic:cli-utils');
function getProject(projectDir, projectName, deps) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!projectDir) {
            return;
        }
        const { log } = deps;
        const projectFilePath = path.resolve(projectDir, constants_1.PROJECT_FILE);
        let projectFile;
        let type;
        try {
            projectFile = yield fs_1.fsReadJsonFile(projectFilePath);
        }
        catch (e) {
            log.error(`Error while loading project config file.\n` +
                `Attempted to load project config ${chalk_1.default.bold(format_1.prettyPath(projectFilePath))} but got error:\n\n` +
                chalk_1.default.red(e.toString()));
        }
        if (projectFile) {
            projectName = projectName || projectFile.defaultProject;
            type = yield project_1.determineProjectType(projectDir, projectName, projectFile, deps);
            debug(`Project name: ${chalk_1.default.bold(String(projectName))}`);
        }
        if (!type) {
            return;
        }
        return project_1.createProjectFromType(projectFilePath, projectName, deps, type);
    });
}
exports.getProject = getProject;
function generateIonicEnvironment(ctx, pargv, env) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        process.chdir(ctx.execPath);
        const argv = config_1.parseGlobalOptions(pargv);
        const projectName = argv['project'] ? String(argv['project']) : undefined;
        const config = new config_1.Config(path.resolve(env['IONIC_CONFIG_DIRECTORY'] || config_1.DEFAULT_CONFIG_DIRECTORY, config_1.CONFIG_FILE));
        debug('Terminal info: %o', terminal_1.TERMINAL_INFO);
        if (config.get('interactive') === false || !terminal_1.TERMINAL_INFO.tty || terminal_1.TERMINAL_INFO.ci) {
            argv['interactive'] = false;
        }
        const flags = argv; // TODO
        debug('CLI global options: %o', flags);
        const log = new logger_1.Logger({
            level: argv['quiet'] ? cli_framework_1.LOGGER_LEVELS.WARN : cli_framework_1.LOGGER_LEVELS.INFO,
            handlers: logger_1.createDefaultLoggerHandlers(),
        });
        const prompt = yield cli_framework_1.createPromptModule({
            interactive: argv['interactive'],
            onFallback: prompts_1.createOnFallback({ flags, log }),
        });
        const projectDir = yield fs_1.findBaseDirectory(ctx.execPath, constants_1.PROJECT_FILE);
        const proxyVars = http_2.PROXY_ENVIRONMENT_VARIABLES.map((e) => [e, env[e]]).filter(([, v]) => !!v);
        const getInfo = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const osName = yield Promise.resolve().then(() => require('os-name'));
            const os = osName();
            const npm = yield shell.cmdinfo('npm', ['-v']);
            const info = [
                {
                    group: 'ionic',
                    key: 'ionic',
                    flair: 'Ionic CLI',
                    value: ctx.version,
                    path: ctx.libPath,
                },
                { group: 'system', key: 'NodeJS', value: process.version, path: process.execPath },
                { group: 'system', key: 'npm', value: npm || 'not installed' },
                { group: 'system', key: 'OS', value: os },
            ];
            info.push(...proxyVars.map(([e, v]) => ({ group: 'environment', key: e, value: v || 'not set' })));
            if (project) {
                info.push(...(yield project.getInfo()));
            }
            return info;
        });
        const shell = new shell_1.Shell({ log }, { alterPath: p => projectDir ? shell_1.prependNodeModulesBinToPath(projectDir, p) : p });
        const client = new http_1.Client(config);
        const session = new session_1.ProSession({ config, client });
        const deps = { client, config, ctx, flags, log, prompt, session, shell };
        const ienv = new environment_1.Environment(Object.assign({ getInfo }, deps));
        if (env['IONIC_CLI_LOCAL_ERROR']) {
            if (env['IONIC_CLI_LOCAL_ERROR'] === bootstrap_1.ERROR_VERSION_TOO_OLD) {
                log.warn(`Detected locally installed Ionic CLI, but it's too old--using global CLI.`);
            }
        }
        if (typeof argv['yarn'] === 'boolean') {
            log.warn(`${chalk_1.default.green('--yarn')} / ${chalk_1.default.green('--no-yarn')} has been removed. Use ${chalk_1.default.green(`ionic config set -g npmClient ${argv['yarn'] ? 'yarn' : 'npm'}`)}.`);
        }
        let project;
        try {
            project = yield getProject(projectDir, projectName, deps);
        }
        catch (e) {
            log.warn(e.toString());
            log.nl();
        }
        return { env: ienv, project };
    });
}
exports.generateIonicEnvironment = generateIonicEnvironment;
