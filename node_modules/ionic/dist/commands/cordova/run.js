"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const cli_framework_1 = require("@ionic/cli-framework");
const process_1 = require("@ionic/cli-framework/utils/process");
const build_1 = require("@ionic/cli-utils/lib/build");
const errors_1 = require("@ionic/cli-utils/lib/errors");
const config_1 = require("@ionic/cli-utils/lib/integrations/cordova/config");
const utils_1 = require("@ionic/cli-utils/lib/integrations/cordova/utils");
const serve_1 = require("@ionic/cli-utils/lib/serve");
const logger_1 = require("@ionic/cli-utils/lib/utils/logger");
const base_1 = require("./base");
const CORDOVA_RUN_OPTIONS = [
    {
        name: 'debug',
        summary: 'Mark as a debug build',
        type: Boolean,
        groups: ['cordova'],
        hint: chalk_1.default.dim('[cordova]'),
    },
    {
        name: 'release',
        summary: 'Mark as a release build',
        type: Boolean,
        groups: ['cordova'],
        hint: chalk_1.default.dim('[cordova]'),
    },
    {
        name: 'device',
        summary: 'Deploy build to a device',
        type: Boolean,
        groups: ['cordova'],
        hint: chalk_1.default.dim('[cordova]'),
    },
    {
        name: 'emulator',
        summary: 'Deploy build to an emulator',
        type: Boolean,
        groups: ['cordova'],
        hint: chalk_1.default.dim('[cordova]'),
    },
    {
        name: 'target',
        summary: `Deploy build to a device (use ${chalk_1.default.green('--list')} to see all)`,
        type: String,
        groups: [cli_framework_1.OptionGroup.Advanced, 'cordova'],
        hint: chalk_1.default.dim('[cordova]'),
    },
    {
        name: 'buildConfig',
        summary: 'Use the specified build configuration',
        groups: [cli_framework_1.OptionGroup.Advanced, 'cordova'],
        hint: chalk_1.default.dim('[cordova]'),
    },
];
class RunCommand extends base_1.CordovaCommand {
    getMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let groups = [];
            const exampleCommands = base_1.CORDOVA_BUILD_EXAMPLE_COMMANDS;
            const options = [
                {
                    name: 'list',
                    summary: 'List all available Cordova targets',
                    type: Boolean,
                    groups: ['cordova'],
                },
                // Build Options
                {
                    name: 'build',
                    summary: 'Do not invoke Ionic build',
                    type: Boolean,
                    default: true,
                },
                ...build_1.COMMON_BUILD_COMMAND_OPTIONS.filter(o => !['engine', 'platform'].includes(o.name)),
                // Serve Options
                ...serve_1.COMMON_SERVE_COMMAND_OPTIONS.filter(o => !['livereload'].includes(o.name)),
                {
                    name: 'livereload',
                    summary: 'Spin up dev server to live-reload www files',
                    type: Boolean,
                    aliases: ['l'],
                },
            ];
            const serveRunner = this.project && (yield this.project.getServeRunner());
            const buildRunner = this.project && (yield this.project.getBuildRunner());
            if (buildRunner) {
                const libmetadata = yield buildRunner.getCommandMetadata();
                groups = libmetadata.groups || [];
                options.push(...libmetadata.options || []);
            }
            if (serveRunner) {
                const libmetadata = yield serveRunner.getCommandMetadata();
                const existingOpts = options.map(o => o.name);
                groups = libmetadata.groups || [];
                options.push(...(libmetadata.options || []).filter(o => !existingOpts.includes(o.name)).map(o => (Object.assign({}, o, { hint: `${o.hint ? `${o.hint} ` : ''}${chalk_1.default.dim('(--livereload)')}` }))));
            }
            // Cordova Options
            options.push(...CORDOVA_RUN_OPTIONS);
            return {
                name: 'run',
                type: 'project',
                summary: 'Run an Ionic project on a connected device',
                description: `
Like running ${chalk_1.default.green('cordova run')} or ${chalk_1.default.green('cordova emulate')} directly, but performs ${chalk_1.default.green('ionic build')} before deploying to the device or emulator. Optionally specify the ${chalk_1.default.green('--livereload')} option to use the dev server from ${chalk_1.default.green('ionic serve')} for livereload functionality.

For Android and iOS, you can setup Remote Debugging on your device with browser development tools using these docs${chalk_1.default.cyan('[1]')}.

Just like with ${chalk_1.default.green('ionic cordova build')}, you can pass additional options to the Cordova CLI using the ${chalk_1.default.green('--')} separator.

${chalk_1.default.cyan('[1]')}: ${chalk_1.default.bold('https://ionicframework.com/docs/developer-resources/developer-tips/')}
      `,
                exampleCommands,
                inputs: [
                    {
                        name: 'platform',
                        summary: `The platform to run (e.g. ${['android', 'ios'].map(v => chalk_1.default.green(v)).join(', ')})`,
                    },
                ],
                options,
                groups,
            };
        });
    }
    preRun(inputs, options, runinfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.preRunChecks(runinfo);
            const metadata = yield this.getMetadata();
            if (options['noproxy']) {
                this.env.log.warn(`The ${chalk_1.default.green('--noproxy')} option has been deprecated. Please use ${chalk_1.default.green('--no-proxy')}.`);
                options['proxy'] = false;
            }
            if (options['x']) {
                options['proxy'] = false;
            }
            if (!options['build'] && options['livereload']) {
                this.env.log.warn(`No livereload with ${chalk_1.default.green('--no-build')}.`);
                options['livereload'] = false;
            }
            if (options['list']) {
                if (!options['device'] && !options['emulator']) {
                    if (metadata.name === 'emulate') {
                        options['emulator'] = true;
                    }
                }
                const args = utils_1.filterArgumentsForCordova(metadata, options);
                yield this.runCordova(['run', ...args.slice(1)], {});
                throw new errors_1.FatalException('', 0);
            }
            if (!inputs[0]) {
                const platform = yield this.env.prompt({
                    type: 'input',
                    name: 'platform',
                    message: `What platform would you like to run (${['android', 'ios'].map(v => chalk_1.default.green(v)).join(', ')}):`,
                });
                inputs[0] = platform.trim();
            }
            yield this.checkForPlatformInstallation(inputs[0]);
        });
    }
    run(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.project) {
                throw new errors_1.FatalException(`Cannot run ${chalk_1.default.green('ionic cordova run/emulate')} outside a project directory.`);
            }
            const metadata = yield this.getMetadata();
            if (options['livereload']) {
                const conf = yield config_1.loadConfigXml({ project: this.project });
                process_1.onBeforeExit(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    conf.resetContentSrc();
                    yield conf.save();
                }));
                const cordovalog = this.env.log.clone();
                cordovalog.handlers = logger_1.createDefaultLoggerHandlers(cli_framework_1.createPrefixedFormatter(`${chalk_1.default.dim(`[cordova]`)} `));
                const cordovalogws = cordovalog.createWriteStream(cli_framework_1.LOGGER_LEVELS.INFO);
                // TODO: use runner directly
                const details = yield serve_1.serve({ flags: this.env.flags, config: this.env.config, log: this.env.log, prompt: this.env.prompt, shell: this.env.shell, project: this.project }, inputs, utils_1.generateOptionsForCordovaBuild(metadata, inputs, options));
                if (details.externallyAccessible === false) {
                    const extra = serve_1.LOCAL_ADDRESSES.includes(details.externalAddress) ? '\nEnsure you have proper port forwarding setup from your device to your computer.' : '';
                    this.env.log.warn(`Your device or emulator may not be able to access ${chalk_1.default.bold(details.externalAddress)}.${extra}\n\n`);
                }
                conf.writeContentSrc(`${details.protocol || 'http'}://${details.externalAddress}:${details.port}`);
                yield conf.save();
                yield this.runCordova(utils_1.filterArgumentsForCordova(metadata, options), { stream: cordovalogws });
                yield process_1.sleepForever();
            }
            else {
                if (options.build) {
                    // TODO: use runner directly
                    yield build_1.build({ config: this.env.config, log: this.env.log, shell: this.env.shell, prompt: this.env.prompt, project: this.project }, inputs, utils_1.generateOptionsForCordovaBuild(metadata, inputs, options));
                }
                yield this.runCordova(utils_1.filterArgumentsForCordova(metadata, options));
            }
        });
    }
}
exports.RunCommand = RunCommand;
