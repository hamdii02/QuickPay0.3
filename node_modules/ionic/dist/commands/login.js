"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const cli_framework_1 = require("@ionic/cli-framework");
const command_1 = require("@ionic/cli-utils/lib/command");
const errors_1 = require("@ionic/cli-utils/lib/errors");
const executor_1 = require("@ionic/cli-utils/lib/executor");
const uuid_1 = require("@ionic/cli-utils/lib/utils/uuid");
class LoginCommand extends command_1.Command {
    getMetadata() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {
                name: 'login',
                type: 'global',
                summary: 'Login to Ionic Pro',
                description: `
Authenticate with Ionic Pro and retrieve a user token, which is stored in the CLI config.

If the ${chalk_1.default.green('IONIC_TOKEN')} environment variable is set, the CLI will automatically authenticate you. To retrieve your user token, first use ${chalk_1.default.green('ionic login')}, then print the token by running the ${chalk_1.default.green('ionic config get -g tokens.user')} command.

You can also use ${chalk_1.default.green('IONIC_EMAIL')} and ${chalk_1.default.green('IONIC_PASSWORD')} environment variables for automatic authentication, but it is not recommended to store your password in plain text.

If you need to create an Ionic Pro account, use ${chalk_1.default.green('ionic signup')}.

If you are having issues logging in, please get in touch with our Support${chalk_1.default.cyan('[1]')}.

${chalk_1.default.cyan('[1]')}: ${chalk_1.default.bold('https://ionicframework.com/support/request')}
      `,
                exampleCommands: ['', 'john@example.com', 'hello@example.com secret'],
                inputs: [
                    {
                        name: 'email',
                        summary: 'Your email address',
                        validators: [cli_framework_1.validators.required, cli_framework_1.validators.email],
                        private: true,
                    },
                    {
                        name: 'password',
                        summary: 'Your password',
                        validators: [cli_framework_1.validators.required],
                        private: true,
                    },
                ],
            };
        });
    }
    preRun(inputs, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (options['email'] || options['password']) {
                throw new errors_1.FatalException(`${chalk_1.default.green('email')} and ${chalk_1.default.green('password')} are command arguments, not options. Please try this:\n` +
                    `${chalk_1.default.green('ionic login <email> <password>')}\n`);
            }
            if (this.env.session.isLoggedIn()) {
                const extra = !inputs[0] || !inputs[1] ? 'Prompting for new credentials.' : 'Attempting login.';
                const email = this.env.config.get('user.email');
                this.env.log.warn(`You are already logged in${email ? ' as ' + chalk_1.default.bold(email) : ''}! ${this.env.flags.interactive ? extra : ''}`);
            }
            else {
                this.env.log.msg(`Log into your Ionic Pro account\n` +
                    `If you don't have one yet, create yours by running: ${chalk_1.default.green(`ionic signup`)}\n`);
            }
            // TODO: combine with promptToLogin ?
            if (!inputs[0]) {
                const email = yield this.env.prompt({
                    type: 'input',
                    name: 'email',
                    message: 'Email:',
                    validate: v => cli_framework_1.validators.required(v) && cli_framework_1.validators.email(v),
                });
                inputs[0] = email;
            }
            if (!inputs[1]) {
                const password = yield this.env.prompt({
                    type: 'password',
                    name: 'password',
                    message: 'Password:',
                    mask: '*',
                    validate: v => cli_framework_1.validators.required(v),
                });
                inputs[1] = password;
            }
        });
    }
    run(inputs, options, runinfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [email, password] = inputs;
            if (this.env.session.isLoggedIn()) {
                this.env.log.msg('Logging you out.');
                yield executor_1.runCommand(runinfo, ['logout']);
                this.env.config.set('tokens.telemetry', uuid_1.generateUUID());
            }
            yield this.env.session.login(email, password);
            this.env.log.ok('You are logged in!');
        });
    }
}
exports.LoginCommand = LoginCommand;
